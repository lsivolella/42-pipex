/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lgoncalv <lgoncalv@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/06/19 12:03:21 by lgoncalv          #+#    #+#             */
/*   Updated: 2022/07/09 22:00:39 by lgoncalv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"
#include <fcntl.h>

void	get_cmd_path(char **cmd, char **envp)
{
	char	**paths;
	char	*path;
	char	*temp;
	int		i;

	i = 0;
	while (envp[i] && ft_strncmp(envp[i], "PATH", 4))
		i++;
	paths = ft_split(envp[i] + 5, ':');
	i = -1;
	while (paths[++i])
	{
		temp = ft_strjoin(paths[i], "/");
		path = ft_strjoin(temp, cmd[0]);
		free(temp);
		if (access(path, F_OK) == 0)
			execve(path, cmd, envp);
		free(path);
	}
	while (paths)
	{
		free(*paths);
		paths++;
	}
	free(paths);
}

void	get_cmd(char *argv, char **envp)
{
	char	**cmd;

	if (!*argv)
		get_error(e_no_arg);
	cmd = ft_split(argv, ' ');
	get_cmd_path(cmd, envp);
	// while (*cmd)
	// {
	// 	printf("%s\n", *cmd);
	// 	cmd++;
	// }
	// if (envp)
	// 	printf("Fuck off\n");
}

void	pipex(t_pipex *data)
{
	int	fd[2];
	int	pid1;
	int	pid2;

	if (pipe(fd) == -1)
		get_error(e_pipe);
	pid1 = fork();
	if (pid1 < 0)
		get_error(e_fork);
	if (pid1 == 0)
	{
		printf("Child process one\n");
		dup2(data->infile, STDIN_FILENO);
		dup2(fd[1], STDOUT_FILENO);
		close(fd[0]);
		get_cmd(data->input.argv[2], data->input.envp);
		close(data->infile);
		close(fd[1]);
	}
	if (pid1 > 0)
	{
		pid2 = fork();
		if (pid2 < 0)
			get_error(e_fork);
		if (pid2 == 0)
		{
			printf("Child process two\n");
			dup2(data->outfile, STDOUT_FILENO);
			dup2(fd[0], STDIN_FILENO);
			close(fd[1]);
			get_cmd(data->input.argv[3], data->input.envp);
			close(data->outfile);
			close(fd[0]);
		}
	}
	close(fd[0]);
	close(fd[1]);
	close(data->infile);
	close(data->outfile);
	waitpid(pid1, NULL, 0);
	waitpid(pid2, NULL, 0);
}

// void	pipex()
// {
// 	int fd[2];
// 	int pid1;
// 	int pid2;
	
// 	if (pipe(fd) == -1)
// 		get_error(e_pipe);
// 	pid1 = fork();
// 	if (pid1 < 0)
// 		get_error(e_fork);
// 	if (pid1 == 0)
// 	{
// 		// child process 1 (ping)
// 		dup2(fd[1], STDOUT_FILENO);
// 		close(fd[0]);
// 		close(fd[1]);
// 		execlp("ping", "ping", "-c", "2", "google.com", NULL);
// 		// the child process will be substituted by the execlp command
// 		// this means that it will not run anymore after the call
// 		// so no need for an else on the process id number
// 	}
// 	pid2 = fork();
// 	if (pid2 < 0)
// 		get_error(e_fork);
// 	if (pid2 == 0)
// 	{
// 		// child process 2 (grep)
// 		dup2(fd[0], STDIN_FILENO);
// 		close(fd[0]);
// 		close(fd[1]);
// 		execlp("grep", "grep", "rtt", NULL);
// 		// the child process will be substituted by the execlp command
// 		// this means that it will not run anymore after the call
// 		// so no need for an else on the process id number
// 	}
// 	close(fd[0]);
// 	close(fd[1]);
// 	waitpid(pid1, NULL, 0);
// 	waitpid(pid2, NULL, 0);
// }

void	init_data(t_pipex *data, char **argv, char **envp)
{
	ft_memset(data, '\0', sizeof(t_pipex));
	data->infile = open(argv[1], O_CREAT | O_RDONLY, 00664);
	if (data->infile < 0)
		get_error(e_open_infile);
	data->outfile = open(argv[4], O_CREAT | O_WRONLY | O_TRUNC, 00664);
	//printf("Argv[4]: %s Outfile Read: %d\n", argv[4], data->outfile);
	if (data->outfile < 0)
	{
		get_error(e_open_outfile);
		exit (1);
	}
	data->input.argv = argv;
	data->input.envp = envp;
	// while (*data->input.argv)
	// {
	// 	printf("%s\n", *data->input.argv);
	// 	data->input.argv++;
	// }
}

int	main(int argc, char **argv, char **envp)
{
	t_pipex	data;
	int file1;
	int file2;

	//ft_putstr_fd("Begin Program\n", 1);
	if (argc == 1)
		get_error(e_no_arg);
	else if (argc < 5 || argc > 5)
		get_error(e_invalid_arg);
	else if (argc == 5)
	{
		file1 = open(argv[1], O_CREAT | O_RDONLY, 00664);
		printf("Argv[1]: \"%s\" | Infile Read: %d\n", argv[1], file1);
		if (file1 == -1)
		{
			get_error(e_open_infile);
			exit (1);
		}
		file2 = open(argv[4], O_CREAT | O_WRONLY | O_TRUNC, 00664);
		printf("Argv[4]: \"%s\" | Outfile Read: %d\n", argv[4], file2);
		if (file2 == -1)
		{
			get_error(e_open_outfile);
			exit (1);
		}
		init_data(&data, argv, envp);
		pipex(&data);
	}
	ft_putstr_fd("End Program\n", 1);
	get_error(e_none);
	return (0);
}
