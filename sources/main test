/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lgoncalv <lgoncalv@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/06/19 12:03:21 by lgoncalv          #+#    #+#             */
/*   Updated: 2022/06/19 19:23:04 by lgoncalv         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "pipex.h"

void	parent_process(int f1, cmd2)
{
	int	status;

	dup2(f2, STDIN_FILENO);
	dup2(end[0], STDOUT_FILENO);
	close(end[1]);
	close(f2);
	// execve function for each possible path
	exit (EXIT_FAILURE);
}


void	child_process(int f1, cmd1)
{
	// add protection if dup2() < 0
	// dup2 closes stdin, f1 becomes the new stdin
	dup2(f1, STDIN_FILENO);
	dup2(end[1], STDOUT_FILENO);
	close(end[0]);	//close the end of the pipe you don't use, or else the process will never finish
	close(f1);
	// execve function for each possible path
	exit(EXIT_FAILURE);
}


void	pipex(int f1, int f2)
{
	int	end[2];
	pid_t	parent;

	pipe(end);
	parent = fork();
	if (parent < 0)
		return pritnf("Error: Fork");
	if (!parent)
		child_process(f1, cmd1);
	else
		parent_process(f2, cmd2);
}

int	main(void)
{
	printf("Test\n");
	// pipe()
	// fork();
	// dupe2();
	// execve()
	// access()
	// we read from infile, execute cmd1 with infile as input, send the output to cmd2, which will write to outfile
	// cmd1 is executed by child process and writes on end[1]
	// cmd2 is executed by parent process and writes on end[0]
}

//	file1 cmd1 cmd2 file2				PIPEX
//	< infile cmd1 | cmd2 > outfile			SHELL
//	< "includes/test1.txt" ls -l | wc -l > "includes/test2.txt"		SHELL EXAMPLE